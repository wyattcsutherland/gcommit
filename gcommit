#!/usr/bin/env bash

TEAM_FILE=".team_members"

if [[ "$1" == "-h" ]]; then
    echo "Usage: gcommit \"Commit message\" [initials... | -a | -d]"
    echo "  e.g. gcommit \"Refactor controller\" ab ef"
    echo "  e.g. gcommit \"Initial commit\" -a   # include all team members"
    echo "  e.g. gcommit \"Test commit\" -d     # debug (implies -a, no commit)"
    exit 0
fi

if [[ ! -f "$TEAM_FILE" ]]; then
    echo "Error: $TEAM_FILE not found."
    exit 1
fi

# Extract commit message
COMMIT_MSG="$1"
shift

if [[ -z "$COMMIT_MSG" || "$COMMIT_MSG" == -* ]]; then
    echo "Error: Commit message is required and must be the first argument."
    echo "Usage: gcommit \"Commit message\" [initials... | -a | -d]"
    exit 1
fi

# Detect debug mode (must be after shifting commit message)
DEBUG_MODE=false
for arg in "$@"; do
    if [[ "$arg" == "-d" ]]; then
        DEBUG_MODE=true
        # Treat debug as if -a was passed
        set -- -a
        break
    fi
done

# Load team members into parallel arrays
INITIALS_LIST=()
AUTHORS_LIST=()
while IFS='=' read -r key value; do
    key=$(echo "$key" | tr '[:upper:]' '[:lower:]' | xargs | tr -d '\r')
    value=$(echo "$value" | xargs | tr -d '\r')
    [[ "$key" =~ ^#.*$ || -z "$key" ]] && continue

    INITIALS_LIST+=("$key")
    AUTHORS_LIST+=("$value")
done < "$TEAM_FILE"

# Build co-author lines
CO_AUTHOR_LINES=""

if [[ "$1" == "-a" ]]; then
    echo "Adding all team members..."
    for ((i=0; i<${#AUTHORS_LIST[@]}; i++)); do
        CO_AUTHOR_LINES+=$'\n'"Co-authored-by: ${AUTHORS_LIST[$i]}"
    done
else
    for initial in "$@"; do
        key=$(echo "$initial" | tr '[:upper:]' '[:lower:]')

        found=false
        for ((i=0; i<${#INITIALS_LIST[@]}; i++)); do
            if [[ "$key" == "${INITIALS_LIST[$i]}" ]]; then
                CO_AUTHOR_LINES+=$'\n'"Co-authored-by: ${AUTHORS_LIST[$i]}"
                found=true
                break
            fi
        done

        if [[ $found == false ]]; then
            echo -e "\033[33mWarning: Unknown initials '$initial' â€” skipping\033[0m"
        fi
    done
fi

# Create commit with co-authors in proper Git format
# echo "$COMMIT_MSG$CO_AUTHOR_LINES"
# Deduplicate co-author lines
CO_AUTHOR_LINES=$(echo "$CO_AUTHOR_LINES" | awk '!seen[$0]++')

if $DEBUG_MODE; then
    echo "==== DEBUG MODE (no commit) ===="
    echo "Team members in $TEAM_FILE:"
    for ((i=0; i<${#INITIALS_LIST[@]}; i++)); do
        echo "  ${INITIALS_LIST[$i]} = ${AUTHORS_LIST[$i]}"
    done
    echo
    echo "Commit message to be used:"
    echo "--------------------------"
    echo "git commit -m \"$COMMIT_MSG\""
    echo "$CO_AUTHOR_LINES"
    echo "============================"
else
    if [[ -n "$CO_AUTHOR_LINES" ]]; then
        git commit -m "$COMMIT_MSG" -m "$CO_AUTHOR_LINES"
    else
        git commit -m "$COMMIT_MSG"
    fi
fi
